name: Build

on: [push, pull_request]

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: [2.x, 3.x]

    steps:
    - uses: actions/checkout@v2

    - name: Install required dependencies using apt-get
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install gfortran libopenblas-dev libfftw3-dev libhdf5-dev libnfft3-dev

    - name: Install required dependencies using brew
      if: matrix.os == 'macos-latest'
      run: |
        brew install openblas fftw hdf5
        echo "LD_LIBRARY_PATH=$(brew --prefix)/opt/openblas:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=$(brew --prefix)/opt/openblas:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "BLAS_ROOT=$(brew --prefix)/opt/openblas" >> $GITHUB_ENV
        echo "LAPACK_ROOT=$(brew --prefix)/opt/openblas" >> $GITHUB_ENV

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Configure
      if: matrix.python-version != '2.x'
      run: |
        cmake -B build \
              -DCMAKE_Fortran_COMPILER=gfortran-10 \
              -DCMAKE_C_COMPILER=gcc-10 \
              -DCMAKE_CXX_COMPILER=g++-10

    - name: Configure (use python2)
      if: matrix.python-version == '2.x'
      run: |
        cmake -B build \
              -DPYTHON_EXECUTABLE=`which python2` \
              -DCMAKE_Fortran_COMPILER=gfortran-10 \
              -DCMAKE_C_COMPILER=gcc-10 \
              -DCMAKE_CXX_COMPILER=g++-10

    - name: Cache NFFT
      uses: actions/cache@v2
      if: matrix.os != 'ubuntu-latest'
      with:
        path: build/nfft_local
        key: ${{ runner.os }}-nfft

    - name: Build
      run: cmake --build build

    - name: Test
      run: |
        cd build
        ctest --output-on-failure
